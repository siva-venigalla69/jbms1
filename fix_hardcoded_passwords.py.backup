#!/usr/bin/env python3
"""
Fix Hardcoded Passwords Script
Automatically replaces hardcoded passwords with secure environment variable usage
"""
import os
import re
import glob
from pathlib import Path

# Hardcoded passwords to replace
HARDCODED_PASSWORDS = [
    "Siri@2299",
    "Siri@2912",
    "admin123"
]

def backup_file(file_path):
    """Create backup of file before modifying"""
    backup_path = f"{file_path}.backup"
    if not os.path.exists(backup_path):
        with open(file_path, 'r', encoding='utf-8') as original:
            with open(backup_path, 'w', encoding='utf-8') as backup:
                backup.write(original.read())
        print(f"  üìÑ Backup created: {backup_path}")

def fix_python_file(file_path):
    """Fix hardcoded passwords in Python files"""
    print(f"üîß Fixing: {file_path}")
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        original_content = content
        changes_made = False
        
        # Add import for os module if not present
        if 'import os' not in content and any(pwd in content for pwd in HARDCODED_PASSWORDS):
            # Find the best place to add import
            lines = content.split('\n')
            import_added = False
            
            for i, line in enumerate(lines):
                if line.startswith('import ') or line.startswith('from '):
                    continue
                elif line.strip() == '' or line.startswith('#'):
                    continue
                else:
                    # Insert import before first non-import line
                    lines.insert(i, 'import os')
                    import_added = True
                    break
            
            if not import_added:
                lines.insert(0, 'import os')
            
            content = '\n'.join(lines)
            changes_made = True
        
        # Replace hardcoded passwords
        for password in HARDCODED_PASSWORDS:
            # Pattern for quoted passwords
            patterns = [
                (f'"{password}"', 'os.getenv("TEST_PASSWORD", "change-me")'),
                (f"'{password}'", 'os.getenv("TEST_PASSWORD", "change-me")'),
                (f'password.*=.*["\'){password}["\']', 'password = os.getenv("TEST_PASSWORD", "change-me")'),
                (f'PASSWORD.*=.*["\'){password}["\']', 'PASSWORD = os.getenv("TEST_PASSWORD", "change-me")'),
            ]
            
            for pattern, replacement in patterns:
                if re.search(pattern, content):
                    content = re.sub(pattern, replacement, content)
                    changes_made = True
                    print(f"  ‚úÖ Replaced {password} with environment variable")
        
        # Write back to file if changes were made
        if changes_made:
            backup_file(file_path)
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"  ‚úÖ Fixed: {file_path}")
            return True
        else:
            print(f"  ‚ÑπÔ∏è  No changes needed: {file_path}")
            return False
            
    except Exception as e:
        print(f"  ‚ùå Error fixing {file_path}: {e}")
        return False

def fix_javascript_file(file_path):
    """Fix hardcoded passwords in JavaScript/TypeScript files"""
    print(f"üîß Fixing: {file_path}")
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        original_content = content
        changes_made = False
        
        # Replace hardcoded passwords in JS/TS
        for password in HARDCODED_PASSWORDS:
            patterns = [
                (f'"{password}"', 'process.env.REACT_APP_TEST_PASSWORD || "change-me"'),
                (f"'{password}'", 'process.env.REACT_APP_TEST_PASSWORD || "change-me"'),
            ]
            
            for pattern, replacement in patterns:
                if re.search(pattern, content):
                    content = re.sub(pattern, replacement, content)
                    changes_made = True
                    print(f"  ‚úÖ Replaced {password} with environment variable")
        
        if changes_made:
            backup_file(file_path)
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"  ‚úÖ Fixed: {file_path}")
            return True
        else:
            print(f"  ‚ÑπÔ∏è  No changes needed: {file_path}")
            return False
            
    except Exception as e:
        print(f"  ‚ùå Error fixing {file_path}: {e}")
        return False

def scan_and_fix_files():
    """Scan for files with hardcoded passwords and fix them"""
    print("üîç Scanning for files with hardcoded passwords...")
    
    # File patterns to check
    file_patterns = [
        "**/*.py",
        "**/*.js",
        "**/*.ts",
        "**/*.tsx"
    ]
    
    files_to_fix = []
    
    # Find files with hardcoded passwords
    for pattern in file_patterns:
        for file_path in glob.glob(pattern, recursive=True):
            # Skip certain directories
            if any(skip in file_path for skip in ['node_modules', '.git', '__pycache__', 'build', 'dist']):
                continue
            
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                for password in HARDCODED_PASSWORDS:
                    if password in content:
                        files_to_fix.append(file_path)
                        break
                        
            except (UnicodeDecodeError, PermissionError):
                continue
    
    if not files_to_fix:
        print("‚úÖ No files with hardcoded passwords found!")
        return True
    
    print(f"\nüìã Found {len(files_to_fix)} files to fix:")
    for file_path in files_to_fix:
        print(f"  ‚Ä¢ {file_path}")
    
    # Ask for confirmation
    response = input(f"\nüîß Fix all {len(files_to_fix)} files? (y/N): ").strip().lower()
    if response not in ['y', 'yes']:
        print("‚èπÔ∏è  Operation cancelled")
        return False
    
    # Fix files
    print("\nüîß Fixing files...")
    fixed_count = 0
    
    for file_path in files_to_fix:
        if file_path.endswith('.py'):
            if fix_python_file(file_path):
                fixed_count += 1
        elif file_path.endswith(('.js', '.ts', '.tsx')):
            if fix_javascript_file(file_path):
                fixed_count += 1
    
    print(f"\n‚úÖ Successfully fixed {fixed_count} files")
    return True

def create_env_files():
    """Create .env template files"""
    print("\nüìÅ Creating environment template files...")
    
    # Create .env.template
    env_template = """# Environment Variables Template
# Copy this to .env for local development

# Test Credentials
TEST_USERNAME=admin
TEST_PASSWORD=your-secure-password-here
TEST_BASE_URL=http://localhost:8000

# Production Credentials
PRODUCTION_PASSWORD=your-production-password-here
PRODUCTION_BASE_URL=https://jbms1.onrender.com

# Frontend Environment (for React)
REACT_APP_TEST_PASSWORD=your-secure-password-here
REACT_APP_API_BASE_URL=http://localhost:8000
"""
    
    with open('.env.template', 'w') as f:
        f.write(env_template)
    print("‚úÖ Created: .env.template")
    
    # Create frontend .env template
    frontend_dir = Path('frontend')
    if frontend_dir.exists():
        frontend_env = """# Frontend Environment Variables
REACT_APP_TEST_PASSWORD=your-secure-password-here
REACT_APP_API_BASE_URL=http://localhost:8000
REACT_APP_PRODUCTION_URL=https://jbms1.onrender.com
"""
        with open(frontend_dir / '.env.template', 'w') as f:
            f.write(frontend_env)
        print("‚úÖ Created: frontend/.env.template")

def show_next_steps():
    """Show next steps after fixing"""
    print("\nüìã NEXT STEPS:")
    print("=" * 50)
    print("1. üîê Set Environment Variables:")
    print("   export TEST_PASSWORD='your-secure-password'")
    print("   export PRODUCTION_PASSWORD='your-production-password'")
    print()
    print("2. üìÅ For Frontend (React):")
    print("   cd frontend")
    print("   cp .env.template .env")
    print("   # Edit .env with your passwords")
    print()
    print("3. ‚úÖ Test Your Changes:")
    print("   python3 secure_test_config.py")
    print("   python3 secure_api_test.py")
    print()
    print("4. üöÄ Commit Changes:")
    print("   git add .")
    print("   git commit -m 'Replace hardcoded passwords with environment variables'")
    print()
    print("‚ö†Ô∏è  IMPORTANT:")
    print("‚Ä¢ Never commit the actual .env files")
    print("‚Ä¢ Use different passwords for dev/test/production")
    print("‚Ä¢ Rotate passwords regularly")

def main():
    """Main function"""
    print("üîí Hardcoded Password Fix Tool")
    print("=" * 60)
    
    # Scan and fix files
    if scan_and_fix_files():
        # Create environment templates
        create_env_files()
        
        # Show next steps
        show_next_steps()
        
        print("\nüéâ Password security fixes completed!")
        print("‚úÖ All hardcoded passwords have been replaced with environment variables")
    else:
        print("\n‚ùå Fix operation failed or was cancelled")

if __name__ == "__main__":
    main() 